"""gasdy.py--------  Compute values of basically analytic formulas in gas dynamic.  Created by Liu Guoqing; Last modification: 2024/12/6"""import numpy as npfrom scipy.interpolate import interp1d__all__ = ['thermo', 'Qm_max', 'Cf_max', 'standard_atmo']R0 = 8.314    # 普适气体常数，J/(mol K)ATOMSPHERE = {    # 地球标准大气属性：海拔(m)、温度(K)、气压比、密度(kg/m3)、海平面压强(Pa)    "altitude": [        0e1, 1e3, 3e3, 5e3, 10e3, 25e3, 50e3, 75e3, 100e3, 130e3, 160e3, 200e3, 300e3, 400e3, 600e3, 1e6],    "temperature": [        288.150, 281.651, 268.650, 255.650, 223.252, 221.552, 270.650, 206.650,        195.08, 469.27, 696.29, 845.56, 976.01, 995.83, 999.85, 1000.00],    "pressure_ratio": [        1.0000, 8.8700e-1, 6.6919e-1, 5.3313e-1, 2.6151e-1, 2.5158e-2, 7.8735e-4, 2.0408e-5,        3.1593e-7, 1.2341e-8, 2.9997e-9, 8.3628e-10, 8.6557e-11, 1.4328e-11, 8.1056e-13, 7.4155e-14],    "density": [        1.2250, 1.1117, 9.0912e-1, 7.6312e-1, 4.1351e-1, 4.0084e-2, 1.0269e-3, 3.4861e-5,        5.604e-7, 8.152e-9, 1.233e-9, 2.541e-10, 1.916e-11, 2.803e-12, 2.137e-13, 3.561e-15],    "pressure_sealevel": 101.325e3}def thermo(cp=1006.43, M=28.966e-3):    """热完全气体参数计算（默认为空气）    :param cp: 等压比热容    :param M: 摩尔质量    :return: 比热比（绝热系数）和气体常数等参数    """    R = R0 / M    cv = cp - R    gamma = cp / cv    return {'gamma': gamma, 'cp': cp, 'cv': cv, 'R': R, 'M': M}def Qm_max(p0, T0, At, gamma=1.4, R=287.):    """计算管道临界截面处的最大流量（默认介质为空气）    :param p0: 管道入口总压    :param T0: 管道入口总温    :param At: 临界截面面积（管道最小面积）    :param gamma: 气体比热比    :param R: 气体常数    :return: 最大质量流量    """    K = np.sqrt(gamma / R) * (2 / (gamma + 1)) ** (0.5 * (gamma + 1) / (gamma - 1))    return K * At * p0 / np.sqrt(T0)def Cf_max(p0, pe=0., gamma=1.4):    """计算喷管的最佳推力系数，即最佳膨胀条件下（喷管出口压强等于环境压强）喷管的推力和推力系数达到的最大值    :param p0: 燃烧室压强    :param pe: 环境压强    :param gamma: 气体比热比    :return: 最佳推力系数    """    exp = (gamma - 1) / gamma    _Cf_max = gamma * (0.5 * (gamma + 1))**(-1./exp) * np.sqrt((gamma + 1) / (gamma - 1))    return _Cf_max * np.sqrt(1 - (pe / p0)**exp)class standard_atmo:    """对地球大气标准属性（海拔、温度、气压、密度）进行插值，需要指定一个自变量"""    _alt = np.array(ATOMSPHERE['altitude'])    _temp = np.array(ATOMSPHERE['temperature'])    _pres_log = np.log(np.array(ATOMSPHERE['pressure_ratio']) * ATOMSPHERE['pressure_sealevel'])    _den_log = np.log(np.array(ATOMSPHERE['density']))    def __init__(self, indep='alt'):        if indep == 'alt':            self._interp = [                interp1d(self._alt, self._temp, kind='cubic'),                interp1d(self._alt, self._pres_log, kind='cubic'),                interp1d(self._alt, self._den_log, kind='cubic')            ]            def func(x):                return self._interp[0](x).tolist(), \                    np.exp(self._interp[1](x)).tolist(), \                    np.exp(self._interp[2](x)).tolist()        elif indep == 'pres':            self._interp = [                interp1d(self._pres_log, self._alt, kind='cubic'),                interp1d(self._pres_log, self._temp, kind='cubic'),                interp1d(self._pres_log, self._den_log, kind='cubic')            ]            def func(x):                x = np.log(x)                return self._interp[0](x).tolist(), \                    self._interp[1](x).tolist(), \                    np.exp(self._interp[2](x)).tolist()        elif indep == 'den':            self._interp = [                interp1d(self._den_log, self._alt, kind='cubic'),                interp1d(self._den_log, self._temp, kind='cubic'),                interp1d(self._den_log, self._pres_log, kind='cubic')            ]            def func(x):                x = np.log(x)                return self._interp[0](x).tolist(), \                    self._interp[1](x).tolist(), \                    np.exp(self._interp[2](x)).tolist()        else:            raise ValueError("Value of parameter 'interp' should be one of 'alt' (altitude), "                             "'pres' (pressure) and 'den' (density).")        self._interp_func = func    def __call__(self, x):        return self._interp_func(x)if __name__ == '__main__':    atmo = standard_atmo(indep='pres')    from cfd_toolbox.plot import func_plot, plot    plot(atmo._pres_log, atmo._alt)    func_plot(lambda x: atmo(x)[0], 1e-8, 101e3, n=1000)