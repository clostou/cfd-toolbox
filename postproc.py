# postproc.py
# 
#   Postprocess with cfd-post batch mode.
#   
#   Created by Liu Guoqing; Last modification: 2024/3/11
# 


import os
import sys
import shlex
import subprocess
import threading
import time
import re


sys.stderr = sys.stdout

work_path = os.getcwd()
output_dir = "postproc"
result_dir = "results"
picture_dir = "pictures"
output_path = os.path.join(work_path, output_dir)
script_path = os.path.join(output_path, "scripts")
picture_path = os.path.join(output_path, picture_dir)
result_path = os.path.join(output_path, result_dir)
os.makedirs(output_path, exist_ok=True)
os.makedirs(script_path, exist_ok=True)
os.makedirs(picture_path, exist_ok=True)
os.makedirs(result_path, exist_ok=True)


def getCse(dirname, dataname, param):
    base_cse = f'''\
# CFD-Post Session File (CFX-21.1)

# This script is automatically generated by python program for batch submission.
# Please DO NOT modify the content unless you know its effects.


COMMAND FILE:
  CFX Post Version = 21.1
END

!$cwd = "{work_path}";
!$data_file = "$cwd/{dirname}/{dataname}";
!$res_file = "$cwd/{output_dir}/{result_dir}/{dirname}.txt";
!$pic_file = "$cwd/{output_dir}/{picture_dir}/{dirname}.png";

!$local_datestring = localtime();
!print "CFD-Post CCL script starts running.\\n";


!sub CreatePlanes {{
  PLANE:Interface
    Domain List = /DOMAIN GROUP:All Domains
    Option = YZ Plane
    Plane Bound = None
    Plane Type = Slice
    Range = Global
    X = 103.0771 [mm]
    Y = 0.0 [mm]
    Z = 0.0 [mm]
  END
  PLANE:Symmetry
    Domain List = /DOMAIN GROUP:All Domains
    Option = XY Plane
    Plane Bound = None
    Plane Type = Slice
    Range = Global
    X = 0.0 [mm]
    Y = 0.0 [mm]
    Z = -0.01 [mm]
  END
  > hide /PLANE:Interface
  > hide /PLANE:Symmetry
!}}


!sub CalcResult {{
  !use Math::Trig;
  !($pe, $units) = evaluate('areaAve(Pressure)@Interface');
  !($fx, $units) = evaluate('force_x()@Interface');
  !($fy, $units) = evaluate('force_y()@Interface');
  !$ftheta = atan($fy / $fx) * (180 / pi);
  !open FOS, ">>$res_file";
  !print FOS "{' '.join(map(str, param))} $pe $fx $fy $ftheta\\n";
  !close FOS;
!}}


!sub SavePicture {{
  USER SCALAR VARIABLE:Mach Number
    Boundary Values = Conservative
    Calculate Global Range = On
    Recipe = Expression
    Expression = Velocity / sqrt(401.49 * Temperature)
    Variable to Copy = Pressure
    Variable to Gradient = Pressure
  END
  CONTOUR:MachNumber
    Domain List = /DOMAIN GROUP:All Domains
    Location List = Symmetry
    Colour Variable = Mach Number
    Contour Range = Global
    Number of Contours = 200
    Draw Contours = Off
    Lighting = On
  END
  > show /CONTOUR:MachNumber, view=/VIEW:View 1
  DEFAULT LEGEND:Default Legend View 1
    Legend Orientation = Vertical
    Legend Title = Legend
    Legend Title Mode = Variable
    Legend X Justification = Left
    Legend Y Justification = Center
    Legend Size = 0.8
    Legend Aspect = 0.05
    Legend Format = %5.2f
  END
  HARDCOPY:
    Antialiasing = Off
    Hardcopy Filename = default.png
    Hardcopy Format = png
    Hardcopy Tolerance = 0.0001
    Image Width = 1920
    Image Height = 1080
    Image Scale = 100
    JPEG Image Quality = 80
    Screen Capture = Off
    Use Screen Size = Off
    White Background = On
  END
  VIEW:View 1
    Camera Mode = User Specified
    CAMERA:
      Option = Pivot Point and Quaternion
      Pivot Point = 0.25, 0, 0
      Scale = 4
      Pan = 0, 0
      Rotation Quaternion = 0, 0, 0, 1
    END
  END
  > hide /WIREFRAME:Wireframe, view=/VIEW:View 1
  > print $pic_file, view=/VIEW:View 1
!}}


!print "Loading case: {dataname} ...\\n";

> load filename=$data_file
!CreatePlanes();
!CalcResult();
!SavePicture();

!print "CFD-Post CCL script finished.\\n";
'''
    return base_cse


def taskParse():
    script_list = []
    for task_dir in os.listdir(work_path):
        task_dir_path = os.path.join(work_path, task_dir)
        if os.path.isdir(task_dir_path):
            try:
                param = [float(s) for s in re.split(r'[^\d/.]', task_dir) if s]
            except:
                continue
            if len(param) == 3:
                if param[1] >= 1:
                    param[1] /= 100    # 如果深度参数为百分数，统一改成小数
                for task_file in os.listdir(task_dir_path):
                    if task_file.endswith('-end.dat.h5'):
                        task_name = '-'.join(map(str, param))
                        script = os.path.join(script_path, task_name + '.cse')
                        with open(script, 'w', encoding='utf-8') as f:
                            f.write(getCse(task_dir, task_file, param))
                        script_list.append(script)
    return script_list


class submitThread(threading.Thread):
    
    def __init__(self, id, cfdpost_path, task_list):
        super(submitThread, self).__init__(name='cfdpost worker %s' % id)
        self.cfdpost_path = cfdpost_path
        self.task_list = task_list
        print("-------- Task List of CFD-Post Worker %s --------" % id)
        for task in task_list:
            print(task)
        self.success = None
    
    def run(self):
        self.success = True
        for id, task in self.task_list:
            cmd = shlex.split(f"{self.cfdpost_path} -batch {task}".replace('\\', '/'))
            p = subprocess.Popen(cmd, shell=False, universal_newlines=None, 
                                 stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            while True:
                line = p.stdout.readline()
                if line:
                    try:
                        line = line.decode('utf-8')
                    except:
                        print(f'[{id}] ' + line, flush=True)
                    else:
                        print(line, end='', flush=True)
                elif p.poll() != None:
                    break
            print(f"[{id}] CFD-Post process exited with code {p.returncode}.")
            self.success &= (p.returncode == 0)


def submit(cfdpost_path, script_list, thread_n=1):
    task_list = list(enumerate(script_list))
    task_n = len(task_list)
    step = task_n / thread_n
    if step < 1:
        print("Task count is less than thread, please check out and try again!")
        return False
    task_pool = []
    for i in range(thread_n):
        sub_task_list = task_list[int(i * step): int((i + 1) * step)]
        task_thread = submitThread(i + 1, cfdpost_path, sub_task_list)
        task_pool.append(task_thread)
    for thread in task_pool:
        thread.start()
    running = True
    while running:
        running = False
        for thread in task_pool:
            running |= thread.is_alive()
        time.sleep(3)
    success = True
    for thread in task_pool:
        success &= thread.success
    return success


def resultCollect(labels=None):
    file_list = os.listdir(result_path)
    file_list.sort()
    with open(os.path.join(output_path, "result.txt"), 'wb') as fw:
        if labels:
            fw.write((' '.join(labels) + '\n').encode())
        for filename in file_list:
            with open(os.path.join(result_path, filename), 'rb') as fr:
                fw.write(fr.readline())


def sec2str(t):
    day = int(t // 86400)
    t = t % 86400
    hour = int(t // 3600)
    t = t % 3600
    minute = int(t // 60)
    t = t % 60
    second = int(t)
    if day != 0:
        return f"{day}d {hour}h {minute}m"
    elif hour != 0:
        return f"{hour}h {minute}m"
    else:
        return f"{minute}m {second}s"


def postproc(cfdpost_path, thread_num):
    t = time.time()
    print("Mission started at " + time.ctime(), flush=True)
    cse_list = taskParse()
    ret = submit(cfdpost_path, cse_list, thread_num)
    if ret:
        resultCollect(labels=["Pos", "Depth", "P0", "Pe", "Fx", "Fy", "Ftheta"])
        print("Time spent: %s" % sec2str(time.time() - t))
        print("Mission completed.", flush=True)
    else:
        print("Time spent: %s" % sec2str(time.time() - t))
        print("Mission finished with some errors (%s)." % ret, flush=True)


if __name__ == '__main__':
    postproc(cfdpost_path="/public/software/ansys_inc211/v211/CFD-Post/bin/cfdpost",
             thread_num=4)


